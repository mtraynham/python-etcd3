"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Copyright 2016-2021 The jetcd authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class KeyValue(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    CREATE_REVISION_FIELD_NUMBER: builtins.int
    MOD_REVISION_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    LEASE_FIELD_NUMBER: builtins.int
    key: builtins.bytes
    """key is the key in bytes. An empty key is not allowed."""
    create_revision: builtins.int
    """create_revision is the revision of last creation on this key."""
    mod_revision: builtins.int
    """mod_revision is the revision of last modification on this key."""
    version: builtins.int
    """version is the version of the key. A deletion resets
    the version to zero and any modification of the key
    increases its version.
    """
    value: builtins.bytes
    """value is the value held by the key, in bytes."""
    lease: builtins.int
    """lease is the ID of the lease that attached to key.
    When the attached lease expires, the key will be deleted.
    If lease is 0, then no lease is attached to the key.
    """
    def __init__(
        self,
        *,
        key: builtins.bytes = ...,
        create_revision: builtins.int = ...,
        mod_revision: builtins.int = ...,
        version: builtins.int = ...,
        value: builtins.bytes = ...,
        lease: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["create_revision", b"create_revision", "key", b"key", "lease", b"lease", "mod_revision", b"mod_revision", "value", b"value", "version", b"version"]) -> None: ...

global___KeyValue = KeyValue

@typing_extensions.final
class Event(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _EventType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _EventTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[Event._EventType.ValueType], builtins.type):  # noqa: F821
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        PUT: Event._EventType.ValueType  # 0
        DELETE: Event._EventType.ValueType  # 1

    class EventType(_EventType, metaclass=_EventTypeEnumTypeWrapper): ...
    PUT: Event.EventType.ValueType  # 0
    DELETE: Event.EventType.ValueType  # 1

    TYPE_FIELD_NUMBER: builtins.int
    KV_FIELD_NUMBER: builtins.int
    PREV_KV_FIELD_NUMBER: builtins.int
    type: global___Event.EventType.ValueType
    """type is the kind of event. If type is a PUT, it indicates
    new data has been stored to the key. If type is a DELETE,
    it indicates the key was deleted.
    """
    @property
    def kv(self) -> global___KeyValue:
        """kv holds the KeyValue for the event.
        A PUT event contains current kv pair.
        A PUT event with kv.Version=1 indicates the creation of a key.
        A DELETE/EXPIRE event contains the deleted key with
        its modification revision set to the revision of deletion.
        """
    @property
    def prev_kv(self) -> global___KeyValue:
        """prev_kv holds the key-value pair before the event happens."""
    def __init__(
        self,
        *,
        type: global___Event.EventType.ValueType = ...,
        kv: global___KeyValue | None = ...,
        prev_kv: global___KeyValue | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["kv", b"kv", "prev_kv", b"prev_kv"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["kv", b"kv", "prev_kv", b"prev_kv", "type", b"type"]) -> None: ...

global___Event = Event
